// <auto-generated />
using System;
using HookahNet.Controllers.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HookahNet.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20201114211537_AddedPropertiesToPrice")]
    partial class AddedPropertiesToPrice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HookahNet.Models.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentCatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.HasIndex("ParentCatalogId");

                    b.ToTable("catalogTable");
                });

            modelBuilder.Entity("HookahNet.Models.GuestUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("guestUserTable");
                });

            modelBuilder.Entity("HookahNet.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("organizationTable");
                });

            modelBuilder.Entity("HookahNet.Models.Products.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Price");
                });

            modelBuilder.Entity("HookahNet.Models.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HookahProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("HookahProductId");

                    b.ToTable("productTable");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("HookahNet.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("totalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("totalId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("HookahNet.Models.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubtotalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("SubtotalId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("HookahNet.Models.ShoppingCartMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuestUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GuestUserId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("shoppingCartMappingTable");
                });

            modelBuilder.Entity("HookahNet.Models.FlaskFluidProduct", b =>
                {
                    b.HasBaseType("HookahNet.Models.Products.Product");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FlaskFluidProductTable");

                    b.HasDiscriminator().HasValue("FlaskFluidProduct");
                });

            modelBuilder.Entity("HookahNet.Models.HookahProduct", b =>
                {
                    b.HasBaseType("HookahNet.Models.Products.Product");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HookahProductTable");

                    b.HasDiscriminator().HasValue("HookahProduct");
                });

            modelBuilder.Entity("HookahNet.Models.TobaccoProduct", b =>
                {
                    b.HasBaseType("HookahNet.Models.Products.Product");

                    b.Property<string>("Brand")
                        .HasColumnName("TobaccoProduct_Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TobaccoProductTable");

                    b.HasDiscriminator().HasValue("TobaccoProduct");
                });

            modelBuilder.Entity("HookahNet.Models.Catalog", b =>
                {
                    b.HasOne("HookahNet.Models.Organization", "Organization")
                        .WithOne("Catalog")
                        .HasForeignKey("HookahNet.Models.Catalog", "OrganizationId");

                    b.HasOne("HookahNet.Models.Catalog", "ParentCatalog")
                        .WithMany("ChildrenCatalogs")
                        .HasForeignKey("ParentCatalogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HookahNet.Models.Products.Price", b =>
                {
                    b.HasOne("HookahNet.Models.Products.Product", null)
                        .WithOne("Price")
                        .HasForeignKey("HookahNet.Models.Products.Price", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HookahNet.Models.Products.Product", b =>
                {
                    b.HasOne("HookahNet.Models.Catalog", null)
                        .WithMany("Products")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HookahNet.Models.HookahProduct", null)
                        .WithMany("Products")
                        .HasForeignKey("HookahProductId");
                });

            modelBuilder.Entity("HookahNet.Models.ShoppingCart", b =>
                {
                    b.HasOne("HookahNet.Models.Products.Price", "total")
                        .WithMany()
                        .HasForeignKey("totalId");
                });

            modelBuilder.Entity("HookahNet.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("HookahNet.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("HookahNet.Models.ShoppingCart", null)
                        .WithMany("shoppingCartItems")
                        .HasForeignKey("ShoppingCartId");

                    b.HasOne("HookahNet.Models.Products.Price", "Subtotal")
                        .WithMany()
                        .HasForeignKey("SubtotalId");
                });

            modelBuilder.Entity("HookahNet.Models.ShoppingCartMapping", b =>
                {
                    b.HasOne("HookahNet.Models.GuestUser", "GuestUser")
                        .WithMany()
                        .HasForeignKey("GuestUserId");

                    b.HasOne("HookahNet.Models.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId");
                });
#pragma warning restore 612, 618
        }
    }
}
